<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Professor 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="CartMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="cart" type="project.jsp.bakery.model.cart">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id" column="id" />
		<result property="proId" column="pro_id" />
		<result property="proName" column="pro_name" />
		<result property="proPrice" column="pro_price" />
		<result property="proCount" column="pro_count" />
		<result property="orderNo" column="order_no" />
		<result property="cuText" column="cu_text" />
		<result property="cuPrice" column="cu_price" />
		<result property="cuCount" column="cu_count" />
		<result property="OrderId" column="Order_id" />
		<result property="EditDate" column="edit_date" />
		<result property="RegDate" column="reg_date" />
		<result property="memberId" column="member_id" />
	</resultMap>

<!-- 전체 조회 -->
	<select id="selectCartCountByMemberId" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- SELECT COUNT(id) FROM cart WHERE member_id=#{memberId} -->
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id FROM cart
		WHERE cu_text is not null and member_id=#{memberId}
	</select>

<!-- 장바구니에서 주문하지 않은 일반제품 조회 -->
	<select id="selectCartProCountId" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id FROM cart
		WHERE pro_name is not null and member_id=#{memberId} and order_no is null
	</select>

<!-- 장바구니에서 주문하지 않은 주문제작제품 조회 -->
	<select id="selectCartCuCountId" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id FROM cart
		WHERE cu_text is not null and member_id=#{memberId} and order_no is null
	</select>
	
	<!-- 결제된 주문번호 있는 일반 상품 조회 -->
	<select id="selectCartOrder1" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id FROM cart
		WHERE pro_name is not null and member_id=#{memberId} and order_no =#{orderNo}
	</select>
	<!-- 결제된 주문번호 있는 주문제작 상품 조회 -->
	<select id="selectCartOrder2" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id FROM cart
		WHERE cu_text is not null and member_id=#{memberId} and order_no =#{orderNo}
	</select>

	<!-- 자신의 게시물인지 검사한다. -->
	<select id="selectCartProCountMemberId" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- SELECT COUNT(id) FROM cart WHERE member_id=#{memberId} -->
		SELECT distinct id, pro_name, pro_price, pro_count, order_no,
		Order_id, edit_date, reg_date, member_id FROM cart
		WHERE
		member_id=#{memberId}
	</select>

	<!-- 자신의 게시물인지 검사한다. -->
	<select id="selectCartCuCountMemberId" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- SELECT COUNT(id) FROM cart WHERE member_id=#{memberId} -->
		SELECT distinct id, order_no, cu_text,
		cu_price, cu_count, Order_id,
		edit_date, reg_date, member_id FROM cart
		WHERE
		member_id=#{memberId}
	</select>
	
	<select id="selectCartTotalPrice" parameterType="project.jsp.bakery.model.cart"
		resultType="int">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT sum(cu_price) + sum(pro_price) as total
		FROM cart
		WHERE order_no is null and member_id=#{memberId}
		ORDER BY id ASC
	</select>

	<select id="selectCartList" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, edit_date, reg_date, member_id
		FROM cart
		ORDER BY
		id ASC
	</select>

<insert id="insertCartItem" parameterType="project.jsp.bakery.model.cart"
		useGeneratedKeys="true" keyProperty="cart">
		INSERT INTO cart (pro_price,pro_count, cu_text,
		cu_price, cu_count,
		edit_date, reg_date, member_id)
		VALUES
		( 0,0,#{cuText},
		#{cuPrice}, 1,
		now(), now(),
		<choose>
			<when test="memberId == 0">
				null
			</when>
			<otherwise>
				#{memberId}
			</otherwise>
		</choose>
		)
	</insert>
	
	
	<!-- 사이드 장바구니에 제품 넣기 -->
	<insert  id="insertProductItem" parameterType="project.jsp.bakery.model.cart"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO cart (
			pro_id, pro_name, pro_price, pro_count, cu_price, reg_date, edit_date, member_id
		) VALUES (
			#{proId},#{proName},#{proPrice},#{proCount},#{cuPrice}, now(),now(),
		<choose>
			<when test="memberId == 0">
				null
			</when>
			<otherwise>
				#{memberId}
			</otherwise>
		</choose>
		)
	</insert>

	<!-- 단일행 조회(상세보기)를 위한 기능 정의 <select id="메서드이름" parameterType="파라미터의 데이터 
		타입" resultMap="리턴될 Beans의 id"> -->
	<select id="selectCartItem" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT distinct id, pro_name, pro_price, pro_count, order_no, cu_text,
		cu_price, cu_count, Order_id, DATE_FORMAT(reg_date, '%Y-%m-%d
		%H:%i:%s') as
		reg_date,
		DATE_FORMAT(edit_date, '%Y-%m-%d %H:%i:%s') as
		edit_date,
		member_id
		FROM cart
		WHERE
		id=#{id}
	</select>
	
	<!-- 제품 리스트 사이드의 장바구니 구현 -->
	<select id="selectProductItem" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT
			pro_id, pro_name, pro_price, pro_count, reg_date, edit_date
		FROM cart
		WHERE
		id=#{id}
	</select>
	
	<!-- 제품 리스트 사이드의 장바구니 구현 -->
	<select id="selectProductList" parameterType="project.jsp.bakery.model.cart"
		resultMap="cart">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		
		SELECT id, pro_id, pro_name, pro_price, pro_count, cu_price, edit_date, reg_date, member_id
		FROM cart
		WHERE pro_id is not null and member_id=#{memberId} and order_no is null
		ORDER BY edit_date DESC
	</select>

	<update id="updateCartItem" parameterType="project.jsp.bakery.model.cart">
		UPDATE cart SET
		pro_name=#{proName}, pro_price=#{proPrice}, pro_count=#{proCount},
		order_no=#{orderNo}, cu_text=#{cuText}, cu_price=#{cuPrice},
		cu_count=#{cuCount},
		Order_id=#{OrderId}, edit_date=#{EditDate},
		reg_date=#{RegDate}
		WHERE
		id=#{id}
	</update>
	
	<!-- 장바구니 품목 수정 -->
	<update id="updateProductItem" parameterType="project.jsp.bakery.model.cart">
		UPDATE cart SET
		pro_price=#{proPrice}, pro_count=#{proCount},
		edit_date=now()
		WHERE
		pro_id=#{proId} and member_id=#{memberId}
	</update>

	<!-- 결제시 주문번호 업데이트 일반제품 -->
	<update id="updateCartItemOrder" parameterType="project.jsp.bakery.model.cart">
		UPDATE cart SET
		order_no=#{orderNo}, edit_date=now()
		WHERE 
		pro_name is not null and member_id=#{memberId} and order_no is null
	</update>
	
	<!-- 결제시 주문번호 업데이트 주문제작제품 -->
	<update id="updateCartItemOrder2" parameterType="project.jsp.bakery.model.cart">
		UPDATE cart SET
		order_no=#{orderNo}, edit_date=now()
		WHERE 
		cu_text is not null and member_id=#{memberId} and order_no is null
	</update>
	
	<delete id="deleteCartItem" parameterType="project.jsp.bakery.model.cart">
		DELETE FROM
		cart
		WHERE
		id=#{id}
	</delete>
	
	<delete id="deleteProduct" parameterType="project.jsp.bakery.model.cart">
		DELETE FROM
		cart
		WHERE
		pro_id=#{proId} and member_id=#{memberId}
	</delete>
	
	<!-- 장바구니 초기화 -->
	<delete id="resetCart" parameterType="project.jsp.bakery.model.cart">
		DELETE FROM
		cart
	</delete>

</mapper>