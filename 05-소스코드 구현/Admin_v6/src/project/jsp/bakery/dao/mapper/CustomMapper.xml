<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="CustomMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="custom" type="project.jsp.bakery.model.Custom">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="id" column="id" />
		<result property="cuClassify" column="cu_classify" />
		<result property="cuName" column="cu_name" />
		<result property="cuPrice" column="cu_price" />
		<result property="cuEditDate" column="cu_edit_date" />
		<result property="cuRegDate" column="cu_reg_date" />
	</resultMap>

	<!-- 아이템 중복검사를 수행한다 -->
	<select id="selectCustomIdCount" parameterType="project.jsp.bakery.model.Custom"
		resultType="int">
		SELECT count(id) FROM custom WHERE
		cu_name=#{cuName} ORDER
		BY id ASC;
	</select>

	<!-- 특정 cu_classify안의 cu_name을 출력 -->
	<select id="selectCustomClassCount" parameterType="project.jsp.bakery.model.Custom"
		resultMap="custom">
		select distinct id, cu_classify, cu_name, cu_price,
		cu_edit_date,
		cu_reg_date from custom where
		cu_classify=#{cuClassify}
		ORDER BY cu_name ASC;

	</select>

	<!-- 다중행 조회 (목록 조회)를 위한 기능 정의 <select id="메서드 이름" parameterType="파라미터로 전달될 
		객체의 클래스 타입" resultMap="리턴될 Beans의 id"> -->
	<select id="getCustomList" parameterType="project.jsp.bakery.model.Custom"
		resultMap="custom">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT id, cu_classify, cu_name, cu_price, cu_edit_date, cu_reg_date
		FROM custom ORDER BY id ASC;
	</select>

	<insert id="insertCustomItem" parameterType="project.jsp.bakery.model.Custom"
		useGeneratedKeys="true" keyProperty="custom">
		INSERT INTO custom (cu_classify,
		cu_name, cu_price, cu_edit_date, cu_reg_date)
		VALUES
		(#{cuClassify},
		#{cuName}, #{cuPrice}, now(), now())
	</insert>

	<!-- 단일행 조회(상세보기)를 위한 기능 정의 <select id="메서드이름" parameterType="파라미터의 데이터 
		타입" resultMap="리턴될 Beans의 id"> -->
	<select id="selectCustomItem" parameterType="project.jsp.bakery.model.Custom"
		resultMap="custom">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT distinct id, cu_classify, cu_name, cu_price, cu_edit_date,
		cu_reg_date
		FROM custom
		WHERE
		id=#{id}
	</select>

	<update id="updateCustomItem" parameterType="project.jsp.bakery.model.Custom">
		UPDATE custom SET
		 cu_name=#{cuName}, cu_price=#{cuPrice},
		cu_edit_date=now() WHERE id=#{id}
	</update>

	<delete id="deleteCustomItem" parameterType="project.jsp.bakery.model.Custom">
		DELETE FROM
		custom
		WHERE id=#{id}
	</delete>

</mapper>
		
		
		
		
		
		
		
		
		
		
		